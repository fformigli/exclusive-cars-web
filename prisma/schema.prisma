generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  Users       User[]
  context     String       @default("user")
  Permissions Permission[]
  seed        Boolean      @default(false)
  deletedAt   DateTime?

  @@map("roles")
}

model Permission {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  Roles       Role[]
  category    String

  @@map("permissions")
}

model User {
  id               Int           @id @default(autoincrement())
  DocumentType     Configuration @relation(fields: [documentTypeId], references: [id])
  documentTypeId   Int
  documentNumber   String
  username         String
  fullName         String
  password         String
  Role             Role          @relation(fields: [roleId], references: [id])
  roleId           Int
  type             Int           @default(1)
  createdBy        Int?
  createdAt        DateTime      @default(now())
  deletedAt        DateTime?
  Client           Client?
  WorkOrder        WorkOrder[]   @relation("AssignedTo")
  WorkOrderCreated WorkOrder[]   @relation("CreatedBy")
  ClientsCreated   Client[]      @relation("CreatedBy")

  @@map("users")
}

model Client {
  id          Int         @id @default(autoincrement())
  User        User        @relation(fields: [userId], references: [id])
  userId      Int         @unique
  phoneNumber String
  ruc         String
  email       String
  CreatedBy   User        @relation("CreatedBy", fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime    @default(now())
  deletedAt   DateTime?
  WorkOrder   WorkOrder[]

  @@map("clients")
}

model Configuration {
  id                  Int               @id @default(autoincrement())
  shortName           String
  name                String
  User                User[]
  ConfigurationType   ConfigurationType @relation(fields: [configurationTypeId], references: [id])
  configurationTypeId Int
  seed                Boolean           @default(false)
  WorkOrder           WorkOrder[]
  createdAt           DateTime          @default(now())
  deletedAt           DateTime?

  @@index([configurationTypeId])
  @@map("configurations")
}

model ConfigurationType {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  translate     String
  Configuration Configuration[]

  @@map("configuration_types")
}

model WorkOrder {
  id                 Int           @id @default(autoincrement())
  Client             Client        @relation(fields: [clientId], references: [id])
  state              Int
  contactPhone       String
  FuelState          Configuration @relation(fields: [fuelStateId], references: [id])
  fuelStateId        Int
  vinNumber          String
  mileage            Int
  clientId           Int
  vehicleInformation String
  plate              String
  AssignedTo         User          @relation("AssignedTo", fields: [userId], references: [id])
  userId             Int
  description        String
  CreatedBy          User          @relation("CreatedBy", fields: [createdById], references: [id])
  createdById        Int
  createdAt          DateTime      @default(now())
  deletedAt          DateTime?

  @@map("work_orders")
}

// todo workorderfiles
// todo workordercomments
