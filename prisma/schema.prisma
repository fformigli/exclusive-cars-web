generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WorkShopBranch {
  id          BigInt      @id @default(autoincrement())
  name        String
  address     String
  phoneNumber String
  User        User[]
  WorkOrder   WorkOrder[]
  deletedAt   DateTime?

  @@map("work_shop_branches")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  Users       User[]
  context     String       @default("user")
  Permissions Permission[]
  seed        Boolean      @default(false)
  deletedAt   DateTime?

  @@map("roles")
}

model Permission {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  Roles       Role[]
  category    String

  @@map("permissions")
}

model User {
  id               Int                @id @default(autoincrement())
  DocumentType     Configuration      @relation(fields: [documentTypeId], references: [id])
  documentTypeId   Int
  documentNumber   String
  username         String
  fullName         String
  password         String
  Role             Role               @relation(fields: [roleId], references: [id])
  roleId           Int
  type             Int                @default(1)
  createdBy        Int?
  createdAt        DateTime           @default(now())
  deletedAt        DateTime?
  Client           Client?
  WorkOrder        WorkOrder[]        @relation("AssignedTo")
  WorkOrderCreated WorkOrder[]        @relation("CreatedBy")
  ClientsCreated   Client[]           @relation("CreatedBy")
  WorkOrderComment WorkOrderComment[]
  WorkShopBranch   WorkShopBranch     @relation(fields: [workShopBranchId], references: [id])
  workShopBranchId BigInt             @default(1)
  Budget           Budget[]
  BudgetComments   BudgetComments[]

  @@map("users")
}

model Client {
  id             Int         @id @default(autoincrement())
  User           User        @relation(fields: [userId], references: [id])
  userId         Int         @unique
  phoneNumber    String
  ruc            String
  email          String
  CreatedBy      User        @relation("CreatedBy", fields: [createdById], references: [id])
  createdById    Int
  createdAt      DateTime    @default(now())
  deletedAt      DateTime?
  WorkOrder      WorkOrder[]
  Budget         Budget[]    @relation("Client")
  BudgetFeedback Budget[]    @relation("ClientFeedback")

  @@map("clients")
}

model Configuration {
  id                  Int               @id @default(autoincrement())
  shortName           String
  name                String
  User                User[]
  ConfigurationType   ConfigurationType @relation(fields: [configurationTypeId], references: [id])
  configurationTypeId Int
  seed                Boolean           @default(false)
  WorkOrder           WorkOrder[]
  createdAt           DateTime          @default(now())
  deletedAt           DateTime?

  @@index([configurationTypeId])
  @@map("configurations")
}

model ConfigurationType {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  translate     String
  Configuration Configuration[]

  @@map("configuration_types")
}

model WorkOrder {
  id                 Int                @id @default(autoincrement())
  Client             Client             @relation(fields: [clientId], references: [id])
  state              Int
  contactPhone       String
  FuelState          Configuration      @relation(fields: [fuelStateId], references: [id])
  fuelStateId        Int
  vinNumber          String
  mileage            Int
  clientId           Int
  vehicleInformation String
  plate              String
  AssignedTo         User               @relation("AssignedTo", fields: [userId], references: [id])
  userId             Int
  description        String
  CreatedBy          User               @relation("CreatedBy", fields: [createdById], references: [id])
  createdById        Int
  createdAt          DateTime           @default(now())
  deletedAt          DateTime?
  WorkOrderComments  WorkOrderComment[]
  WorkShopBranch     WorkShopBranch     @relation(fields: [workShopBranchId], references: [id])
  workShopBranchId   BigInt
  Budget             Budget[]

  @@map("work_orders")
}

model WorkOrderComment {
  id          BigInt    @id @default(autoincrement())
  WorkOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int
  comment     String
  createdAt   DateTime  @default(now())
  CreatedBy   User      @relation(fields: [createdById], references: [id])
  createdById Int

  @@map("work_order_comments")
}

model Supplier {
  id               BigInt    @id @default(autoincrement())
  name             String
  description      String
  phoneNumber      String
  address          String
  otherContactInfo String
  Product          Product[]
  deletedAt        DateTime?
}

model Product {
  id           BigInt         @id @default(autoincrement())
  name         String
  description  String
  quantity     Int
  cost         Int
  Supplier     Supplier?      @relation(fields: [supplierId], references: [id])
  supplierId   BigInt?
  category     String
  deletedAt    DateTime?
  BudgetDetail BudgetDetail[]
}

model Service {
  id           BigInt         @id @default(autoincrement())
  name         String
  description  String
  BudgetDetail BudgetDetail[]
  price        Int
}

model Budget {
  id                BigInt           @id @default(autoincrement())
  WorkOrder         WorkOrder?       @relation(fields: [workOrderId], references: [id])
  Client            Client           @relation("Client", fields: [clientId], references: [id])
  clientId          Int
  workOrderId       Int?
  state             Int
  BudgetDetail      BudgetDetail[]
  CreatedBy         User             @relation(fields: [createdById], references: [id])
  createdById       Int
  createdAt         DateTime         @default(now())
  deletedAt         DateTime?
  BudgetComments    BudgetComments[]
  FeedbackBy        Client?          @relation("ClientFeedback", fields: [feedbackById], references: [id])
  feedbackById      Int?
  feedbackTimestamp DateTime?

  @@map("budgets")
}

model BudgetDetail {
  id             BigInt   @id @default(autoincrement())
  Budget         Budget   @relation(fields: [budgetId], references: [id])
  budgetId       BigInt
  concept        String
  quantity       Int
  unitaryPrice   Int
  Product        Product? @relation(fields: [productId], references: [id])
  productId      BigInt?
  Service        Service? @relation(fields: [serviceId], references: [id])
  serviceId      BigInt?
  additionalData String

  @@map("budget_details")
}

model BudgetComments {
  id          BigInt   @id @default(autoincrement())
  Budget      Budget   @relation(fields: [budgetId], references: [id])
  budgetId    BigInt
  comment     String
  createdAt   DateTime
  CreatedBy   User     @relation(fields: [createdById], references: [id])
  createdById Int
}
